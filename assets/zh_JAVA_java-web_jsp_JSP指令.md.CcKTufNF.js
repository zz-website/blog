import{_ as t,c as e,o as l,j as i,al as n,a as p,t as h}from"./chunks/framework.e2XRIRDf.js";const y=JSON.parse('{"title":"JSP指令","description":"","frontmatter":{"title":"JSP指令"},"headers":[],"relativePath":"zh/JAVA/java-web/jsp/JSP指令.md","filePath":"zh/JAVA/java-web/jsp/JSP指令.md","lastUpdated":1748792936000}'),r={name:"zh/JAVA/java-web/jsp/JSP指令.md"},k={id:"frontmatter-title",tabindex:"-1"};function o(a,s,d,u,c,g){return l(),e("div",null,[i("h1",k,[p(h(a.$frontmatter.title)+" ",1),s[0]||(s[0]=i("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),s[1]||(s[1]=n(`<h2 id="jsp-指令的种类" tabindex="-1">JSP 指令的种类 <a class="header-anchor" href="#jsp-指令的种类" aria-label="Permalink to &quot;JSP 指令的种类&quot;">​</a></h2><p>JSP 指令可以分为以下几种类型：</p><ul><li>页面指令（Page Directive）：用于设置页面级属性，如语言、错误页面和缓冲区大小。</li><li>包含指令（Include Directive）：用于包含其他文件的内容。</li><li>标签库指令（Taglib Directive）：用于引入自定义标签库。</li><li>注释指令（Comment Directive）：用于在 JSP 源文件中添加注释。</li></ul><h2 id="页面指令" tabindex="-1">页面指令 <a class="header-anchor" href="#页面指令" aria-label="Permalink to &quot;页面指令&quot;">​</a></h2><p>页面指令用于设置页面级属性。它们位于 JSP 页面的顶部，并以 &lt;%@ 开头，以 %&gt; 结尾。以下是一些常用的页面指令：</p><h3 id="page-指令" tabindex="-1">page 指令 <a class="header-anchor" href="#page-指令" aria-label="Permalink to &quot;page 指令&quot;">​</a></h3><p>page 指令用于设置页面的各种属性。以下是一些常用的属性：</p><ul><li>language：指定在 JSP 页面中使用的编程语言，通常为 “java”。</li><li>contentType：设置响应的内容类型和字符编码。例如，contentType=&quot;text/html; charset=UTF-8&quot;。</li><li>import：导入 Java 类。您可以使用多个 import 指令。</li><li>session：指定是否使用会话。可以设置为 “true” 或 “false”。</li><li>errorPage：指定在页面发生错误时将请求重定向到的页面。</li><li>isErrorPage：指定页面是否用作错误处理页面。</li></ul><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ page language</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> contentType</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;text/html; charset=UTF-8&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;java.util.*&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> session=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> errorPage=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;error.jsp&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> isErrorPage=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> %&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><h3 id="include-指令" tabindex="-1">include 指令 <a class="header-anchor" href="#include-指令" aria-label="Permalink to &quot;include 指令&quot;">​</a></h3><p>include 指令用于在 JSP 页面中包含其他文件的内容。这对于在多个页面中重复使用相同的代码非常有用。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ include file</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filename&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><p>file 属性指定要包含的文件的相对路径。被包含的文件可以是 JSP、HTML 或文本文件。</p><h3 id="taglib-指令" tabindex="-1">taglib 指令 <a class="header-anchor" href="#taglib-指令" aria-label="Permalink to &quot;taglib 指令&quot;">​</a></h3><p>taglib 指令用于引入自定义标签库，以便在 JSP 页面中使用自定义标签。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ taglib uri</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;taglib-uri&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> prefix</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;taglib-prefix&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> %&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br></div></div><ul><li>uri 属性指定标签库的唯一标识符。</li><li>prefix 属性指定用于调用标签库中标签的前缀。</li></ul><h3 id="comment-指令" tabindex="-1">comment 指令 <a class="header-anchor" href="#comment-指令" aria-label="Permalink to &quot;comment 指令&quot;">​</a></h3><p>comment 指令用于在 JSP 源文件中添加注释。这些注释不会被发送到客户端，只是用于代码的文档或说明。</p><div class="language-javascript vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ comment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;!--</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 这是一个 </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">JSP</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> 注释 </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">--&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">@ end comment </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p>comment 指令之间的内容将被视为注释，不会影响生成的 HTML。</p><h2 id="引用-jsp-指令的值" tabindex="-1">引用 JSP 指令的值 <a class="header-anchor" href="#引用-jsp-指令的值" aria-label="Permalink to &quot;引用 JSP 指令的值&quot;">​</a></h2><p>有时，您可能需要在 JSP 页面中引用页面指令的属性值。可以使用 EL 表达式或脚本let来引用这些值。</p><p>以下是一个示例，展示如何引用页面指令的属性：</p><div class="language-html vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page contentType=&quot;text/html; charset=UTF-8&quot; %&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page import=&quot;java.util.*&quot; %&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page session=&quot;true&quot; %&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page errorPage=&quot;error.jsp&quot; %&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%@ page isErrorPage=&quot;true&quot; %&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;!</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">DOCTYPE</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    &lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">meta</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> charset</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">=</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&lt;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">%= pageContext.findAttribute(&quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pageCharset</span><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">&quot;)</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> %</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;&quot;&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">head</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#B31D28;--shiki-light-font-style:italic;--shiki-dark:#FDAEB7;--shiki-dark-font-style:italic;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">%= new Date() %&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">body</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&lt;/</span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">html</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div><p>在这个示例中，我们使用 &lt;%= pageContext.findAttribute(&quot;pageCharset&quot;) %&gt; 引用了 contentType 属性的值。</p><h2 id="动作标签" tabindex="-1">动作标签 <a class="header-anchor" href="#动作标签" aria-label="Permalink to &quot;动作标签&quot;">​</a></h2><p>语法: &lt;jsp:action_name attribute1=&quot;value1&quot; attribute2=&quot;value2&quot;.../&gt; jsp页面在运行期间的命令</p><h3 id="forward-动作" tabindex="-1">forward 动作 <a class="header-anchor" href="#forward-动作" aria-label="Permalink to &quot;forward 动作&quot;">​</a></h3><p>语法: &lt;jsp:forward page=&quot;url&quot;/&gt; 将请求转发到其他页面</p><h3 id="include-动作" tabindex="-1">include 动作 <a class="header-anchor" href="#include-动作" aria-label="Permalink to &quot;include 动作&quot;">​</a></h3><p>语法: &lt;jsp:include page=&quot;url&quot;/&gt; 将其他页面的输出结果引入到当前页面</p><h3 id="usebean-动作" tabindex="-1">useBean 动作 <a class="header-anchor" href="#usebean-动作" aria-label="Permalink to &quot;useBean 动作&quot;">​</a></h3><p>语法: &lt;jsp:useBean id=&quot;name&quot; class=&quot;class&quot;/&gt; 在类加载后，可以通过jsp:setProperty,jsp:getProperty动作修改获取类的属性值</p><h3 id="setproperty" tabindex="-1">setProperty <a class="header-anchor" href="#setproperty" aria-label="Permalink to &quot;setProperty&quot;">​</a></h3><p>语法: &lt;jsp:setProperty name=&quot;name&quot; property=&quot;property&quot; value=&quot;value&quot;/&gt;</p><h3 id="getproperty" tabindex="-1">getProperty <a class="header-anchor" href="#getproperty" aria-label="Permalink to &quot;getProperty&quot;">​</a></h3><p>语法: &lt;jsp:getProperty name=&quot;name&quot; property=&quot;property&quot;/&gt;</p><h3 id="param-动作" tabindex="-1">param 动作 <a class="header-anchor" href="#param-动作" aria-label="Permalink to &quot;param 动作&quot;">​</a></h3><p>语法: &lt;jsp:param name=&quot;name&quot; value=&quot;value&quot;/&gt; 参数传递，在转发动作内部使用</p><h2 id="usebean和import有什么区别" tabindex="-1">useBean和import有什么区别？ <a class="header-anchor" href="#usebean和import有什么区别" aria-label="Permalink to &quot;useBean和import有什么区别？&quot;">​</a></h2><ul><li><p>import 只是帮你在这个页面中声明对一个类的引入，并没有使用这个类</p></li><li><p>useBean 则是声明了一个对象，并实例化了这个对象，并把这个对象放入到作用域中，可以通过jsp:setProperty,jsp:getProperty动作修改获取类的属性值</p></li></ul><h2 id="include和jsp-include有什么区别" tabindex="-1">@include和jsp:include有什么区别？ <a class="header-anchor" href="#include和jsp-include有什么区别" aria-label="Permalink to &quot;@include和jsp:include有什么区别？&quot;">​</a></h2><p>jsp:include 是在请求阶段向被包含的页面发起了一个请求，页面响应的内容被包含到了当前页面。</p><p>@include 是直接将被包含文件的内容替换到了当前页面，如果当前页面和被包含页面出现相同的变量定义，会出现编译异常</p><p>jsp:include 转译成两个java文件，@include转译成一个java文件</p><p>jsp:include 可以通过jps:parm传递参数，@include则不能</p>`,47))])}const b=t(r,[["render",o]]);export{y as __pageData,b as default};
