import{_ as s,c as l,o as r,j as t,al as a,a as n,t as o}from"./chunks/framework.e2XRIRDf.js";const f=JSON.parse('{"title":"监听器详解","description":"","frontmatter":{"title":"监听器详解"},"headers":[],"relativePath":"zh/JAVA/java-web/listener/监听器详解.md","filePath":"zh/JAVA/java-web/listener/监听器详解.md","lastUpdated":1748792936000}'),S={name:"zh/JAVA/java-web/listener/监听器详解.md"},_={id:"frontmatter-title",tabindex:"-1"};function p(i,e,d,u,v,c){return r(),l("div",null,[t("h1",_,[n(o(i.$frontmatter.title)+" ",1),e[0]||(e[0]=t("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),e[1]||(e[1]=a('<ul><li>ServletContextAttributeListener 用来感知ServlerContext对象属性变化，比如添加或删除属性变化</li><li>ServletContextListener 用来感知ServlerContext对象的创建和销毁的</li><li>ServletRequestListener 可以用来监听感知ServletRequest对象的创建和销毁的</li><li>ServletRequestAttributeListener 用来感知ServletRequest属性变化，如何添加或删除属性还是替换</li><li>HttpSessionListener监听session的变化，常用于统计在线人数</li><li>HttpSessionAttributeListener用来监听Session属性变化</li><li>HttpSessionBindingListener 用来监听把一个数据绑定到Session对象 感知监听器</li><li>HttpSessionActivationListener用来监听session绑定的对象钝化(把对象持久化磁盘)</li></ul><h2 id="作用" tabindex="-1">作用 <a class="header-anchor" href="#作用" aria-label="Permalink to &quot;作用&quot;">​</a></h2><p>通过监听器，我们可以监听某个对象，如果被监听的对象发生某些改变，那么我们的监听器就可以立即知道，从而可以做出一些处理操作。</p><p>在整个Servlet规范中，主要定义了【8类监听器】，但是在实际开发中，使用最多的可能就只有下面这三个，分别是：</p><ul><li>用于监听ServletContext上下文的监听器。</li><li>用于监听HttpSession会话的监听器。</li><li>用于监听ServletRequest请求对象的监听器。</li></ul><p>Servlet组件中，可以利用上面三个监听器实现【对象创建和销毁】、【属性变化】、【session状态变化】的监听功能。</p><ul><li>对象的创建和销毁</li><li>属性变化（添加属性、移除属性、替换属性）</li><li>session状态变化（绑定session、解绑session，不常用）</li></ul>',7))])}const h=s(S,[["render",p]]);export{f as __pageData,h as default};
