import{_ as l,c as t,o as e,j as s,al as n,a as h,t as p}from"./chunks/framework.e2XRIRDf.js";const m=JSON.parse('{"title":"EL表达式","description":"","frontmatter":{"title":"EL表达式"},"headers":[],"relativePath":"zh/JAVA/java-web/jsp/EL表达式.md","filePath":"zh/JAVA/java-web/jsp/EL表达式.md","lastUpdated":1748792936000}'),r={name:"zh/JAVA/java-web/jsp/EL表达式.md"},k={id:"frontmatter-title",tabindex:"-1"};function d(a,i,o,E,g,u){return e(),t("div",null,[s("h1",k,[h(p(a.$frontmatter.title)+" ",1),i[0]||(i[0]=s("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),i[1]||(i[1]=n(`<ul><li>使得JSP写起来更简单，简洁，主要用于获取作用域中的数据</li><li>用来替换作用域对象.getAttribute(&quot;name&quot;)</li></ul><h2 id="基本应用" tabindex="-1">基本应用 <a class="header-anchor" href="#基本应用" aria-label="Permalink to &quot;基本应用&quot;">​</a></h2><ul><li>\${scope.name}获取具体某个作用域中的数据</li><li>\${name}获取作用域中的数据，逐级查找(pageContxt, request, session, application), 此顺序已经过验证</li></ul><div class="language-java vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;%</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    request.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">setAttribute</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;num&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1234</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">%&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;===============</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">算数运算</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==================&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${requestScope.num}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    &lt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">num</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">+</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">1</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">:</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> \${num}</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&lt;/</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">div</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br></div></div><h2 id="el和jsp脚本的区别" tabindex="-1">EL和JSP脚本的区别 <a class="header-anchor" href="#el和jsp脚本的区别" aria-label="Permalink to &quot;EL和JSP脚本的区别&quot;">​</a></h2><ul><li>&lt;% request.getAttribule(&quot;name&quot;) %&gt; 没有找到返回null</li><li>\${requestScope.name} 没找到返回&quot;&quot;</li></ul><h2 id="el应用" tabindex="-1">EL应用 <a class="header-anchor" href="#el应用" aria-label="Permalink to &quot;EL应用&quot;">​</a></h2><p>使用EL获取作用域中的对象调用属性时，只能访问对象的get方法，必须遵守命名规范定义</p><h3 id="获取对象属性" tabindex="-1">获取对象属性 <a class="header-anchor" href="#获取对象属性" aria-label="Permalink to &quot;获取对象属性&quot;">​</a></h3><h3 id="获取array-list-map中的元素" tabindex="-1">获取Array,List,Map中的元素 <a class="header-anchor" href="#获取array-list-map中的元素" aria-label="Permalink to &quot;获取Array,List,Map中的元素&quot;">​</a></h3><p>Set由于没有下标，无法直接访问元素，后续可遍历</p><h3 id="运算符" tabindex="-1">运算符 <a class="header-anchor" href="#运算符" aria-label="Permalink to &quot;运算符&quot;">​</a></h3><ul><li>“.” 访问一个Bean对象属性或者一个映射条目</li><li>“[]” 访问一个数组或者链表的元素</li><li>“+” 加</li><li>“-” 减</li><li>“*” 乘</li><li>“/ or div” 除</li><li>“% or mod” 取模</li><li>“== or eq” 等于</li><li>“!= or ne” 不等于</li><li>“&lt; or lt” 小于</li><li>“&gt; or gt” 大于</li><li>“&lt;= or le” 小于等于</li><li>“&gt;= or ge” 大于等于</li><li>“&amp;&amp; or and” 逻辑与</li><li>“|| or or” 逻辑或</li><li>“! or not” 取反</li><li>empty 空值</li></ul><h2 id="_11个隐式对象" tabindex="-1">11个隐式对象 <a class="header-anchor" href="#_11个隐式对象" aria-label="Permalink to &quot;11个隐式对象&quot;">​</a></h2><ul><li>pageScope: 表示变量只能在本页面使用。</li><li>requestScope: 表示变量能在本次请求中使用。</li><li>sessionScope: 表示变量能在本次会话中使用。</li><li>applicationScope: 表示变量能在整个应用程序中使用。</li><li>param: 表示请求参数。</li><li>paramValues: Request对象的参数，字符串集合</li><li>header: HTTP信息头，字符串</li><li>headerValues: HTTP信息头，字符串信息集合</li><li>initParam: 上下文初始化参数</li><li>cookie: Cookie值</li><li>pageContext: 当前页面的pageContext</li></ul>`,15))])}const y=l(r,[["render",d]]);export{m as __pageData,y as default};
