import{_ as l,C as i,c as o,o as p,j as a,al as s,a as t,t as d,G as c}from"./chunks/framework.e2XRIRDf.js";const S=JSON.parse('{"title":"servlet 内置方法","description":"","frontmatter":{"title":"servlet 内置方法","order":30},"headers":[],"relativePath":"zh/JAVA/java-web/servlet/内置方法.md","filePath":"zh/JAVA/java-web/servlet/内置方法.md","lastUpdated":1748792936000}'),h={name:"zh/JAVA/java-web/servlet/内置方法.md"},v={id:"frontmatter-title",tabindex:"-1"};function b(n,e,u,m,_,f){const r=i("load-on-startup");return p(),o("div",null,[a("h1",v,[t(d(n.$frontmatter.title)+" ",1),e[0]||(e[0]=a("a",{class:"header-anchor",href:"#frontmatter-title","aria-label":'Permalink to "{{ $frontmatter.title }}"'},"​",-1))]),e[3]||(e[3]=s(`<h2 id="生命周期" tabindex="-1">生命周期 <a class="header-anchor" href="#生命周期" aria-label="Permalink to &quot;生命周期&quot;">​</a></h2><div class="language-text vp-adaptive-theme line-numbers-mode"><button title="Copy Code" class="copy"></button><span class="lang">text</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>1.加载，实例化。默认情况下第一次访问才会被创建，可以通过配置修改loadOnStartUp=1</span></span>
<span class="line"><span>    1.负整数：第一次访问创建</span></span>
<span class="line"><span>    2.正整数或0：服务器启动就创建</span></span>
<span class="line"><span>    数字越小，优先级越高</span></span>
<span class="line"><span>2.初始化。init()，只会被调用一次。一般用来加载配置文件，写一些业务逻辑使用。</span></span>
<span class="line"><span>3.请求处理。service()，每次浏览器访问，都会调用处理请求。</span></span>
<span class="line"><span>4.服务终止。destroy(),销毁资源，释放内存</span></span></code></pre><div class="line-numbers-wrapper" aria-hidden="true"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div><h2 id="init" tabindex="-1">init <a class="header-anchor" href="#init" aria-label="Permalink to &quot;init&quot;">​</a></h2><p>init() 只会被调用一次，是在第一次访问(or 创建) Servlet 的时候被调用，在后续的每次请求时都不会再调用 init() 方法了</p><p>init() 用于 Servlet 的初始化，可以简单地创建或加载一些数据，这些数据将被用于 Servlet 的整个生命周期。</p>`,5)),a("p",null,[e[1]||(e[1]=t("创建的时机可以通过")),c(r),e[2]||(e[2]=t("标签来设置，当服务器启动时，Servlet 容器会根据这个标签的值，决定何时创建这个 Servlet。负数表示首次访问时创建，正数表示服务器启动就创建。"))]),e[4]||(e[4]=s('<h2 id="getservletconfig" tabindex="-1">getServletConfig <a class="header-anchor" href="#getservletconfig" aria-label="Permalink to &quot;getServletConfig&quot;">​</a></h2><h2 id="getservletinfo" tabindex="-1">getServletInfo <a class="header-anchor" href="#getservletinfo" aria-label="Permalink to &quot;getServletInfo&quot;">​</a></h2><p>getServletInfo() 方法是一个可选的方法，它提供有关 servlet 的信息，如作者、版本、版权。</p><h2 id="service" tabindex="-1">service <a class="header-anchor" href="#service" aria-label="Permalink to &quot;service&quot;">​</a></h2><p>service() 方法用于处理客户端的请求，并返回响应。</p><h2 id="destroy" tabindex="-1">destroy <a class="header-anchor" href="#destroy" aria-label="Permalink to &quot;destroy&quot;">​</a></h2><p>destroy() 方法用于释放 Servlet 占用的资源，例如关闭数据库连接、释放内存等。</p>',7))])}const x=l(h,[["render",b]]);export{S as __pageData,x as default};
